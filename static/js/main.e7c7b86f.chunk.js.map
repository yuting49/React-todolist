{"version":3,"sources":["todo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","delete","bind","assertThisInitialized","mark","_this$props","todo","deleteTodo","id","_this$props2","markTodo","taskClass","classNames","list-group-item","d-flex","justify-content-between","bgg","isCompleted","react_default","a","createElement","className","text","type","onClick","Component","App","handleSubmit","e","preventDefault","handleChange","setState","todotext","target","value","state","todos","addTodo","todoData","window","localStorage","getItem","oldtodos","JSON","parse","length","prevProps","prevState","setItem","stringify","_this$state","concat","toConsumableArray","map","objectSpread","filter","_this2","onSubmit","name","placeholder","onChange","src_todo","key","class","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7c7b86f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport classNames from 'classnames';\n\nclass Todo extends Component {\n  constructor(props){\n    super(props)\n    this.delete = this.delete.bind(this)\n    this.mark = this.mark.bind(this)\n  }\n\n  delete(){\n    const {todo, deleteTodo} = this.props\n    deleteTodo(todo.id)\n  }\n \n  mark(){\n    const {todo, markTodo} = this.props\n    markTodo(todo.id)\n  }\n\n  render() {\n    const {todo} = this.props\n    const taskClass = classNames({\n      'list-group-item': true,\n      'd-flex': true, \n      'justify-content-between': true,\n      'bgg': todo.isCompleted,\n    })\n    \n    return (\n      <li  className={taskClass}>\n        {todo.text} \n        <div>\n          <button type='button' className=\"btn btn-success\" onClick={this.mark}>完成</button>\n          <button type='button' className='btn btn-danger' onClick={this.delete}>刪除</button>\n        </div>\n      </li>\n    );\n  }\n}\n\nexport default Todo;","import React, { Component } from 'react';\nimport Todo from './todo';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      todos: [],\n      todotext: ''\n    }\n    this.id = 1\n    this.handleChange = this.handleChange.bind(this)\n    this.addTodo = this.addTodo.bind(this)\n    this.deleteTodo = this.deleteTodo.bind(this)\n    this.markTodo = this.markTodo.bind(this)\n  }\n\n  componentDidMount(){\n    const todoData = window.localStorage.getItem('todoapp') \n    if (todoData) {\n      const oldtodos = JSON.parse(todoData)\n      this.setState({\n        todos: oldtodos\n      })\n      this.id = oldtodos[oldtodos.length - 1].id + 1\n    } \n  }\n\n  componentDidUpdate(prevProps,prevState){\n    if (prevState.todos !== this.state.todos) {\n      window.localStorage.setItem('todoapp', JSON.stringify(this.state.todos))\n    }\n  }\n\n  handleSubmit = (e) =>{\n    e.preventDefault()\n  }\n\n  handleChange = (e) =>{\n    this.setState({\n      todotext: e.target.value\n    })\n  }\n\n  addTodo(){\n    const { todotext, todos } = this.state\n    if (todotext === ''){\n      return\n    }\n    this.setState({\n      todos:[...todos,{\n        id: this.id,\n        text: todotext,\n        isCompleted: false,\n      }],\n      todotext: ''\n    })\n    this.id++\n  }\n\n  markTodo(id){\n    this.setState({\n      todos: this.state.todos.map(todo =>{\n        if (todo.id !== id){\n          return todo\n        } \n        return {\n          ...todo,\n          isCompleted: !todo.isCompleted,\n        }\n      })\n    })\n  }\n\n  deleteTodo(id){\n    this.setState({\n      todos: this.state.todos.filter(todo => todo.id !== id)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>Todo List</h1>\n        <form className=\"form-group input-group mb-3\" onSubmit={this.handleSubmit}>\n            <input className=\"form-control\" type=\"text\" name=\"todos\" placeholder=\"Things to do\" value={this.state.todotext} onChange={this.handleChange}/>\n            <button className=\"btn btn-primary\" type=\"submit\" onClick={this.addTodo}>Add Todo</button>\n        </form>\n        <ul className=\"list-group\">\n          {this.state.todos.map(todo => \n            <Todo key={todo.id} todo={todo} class={todo.taskClass} \n                  markTodo={this.markTodo} deleteTodo={this.deleteTodo}/>)}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}